#include "oled-128x64.h"
#include <stdio.h>
#include <stdarg.h>


static const uint8_t ASCII[][5] =
{
   {0x00, 0x00, 0x00, 0x00, 0x00} // 20
  ,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
  ,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
  ,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
  ,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
  ,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
  ,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
  ,{0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
  ,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
  ,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
  ,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
  ,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
  ,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
  ,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
  ,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
  ,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
  ,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
  ,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
  ,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
  ,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
  ,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
  ,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
  ,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
  ,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
  ,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
  ,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
  ,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
  ,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
  ,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
  ,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
  ,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
  ,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
  ,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
  ,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
  ,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
  ,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
  ,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
  ,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
  ,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
  ,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
  ,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
  ,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
  ,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
  ,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
  ,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
  ,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
  ,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
  ,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
  ,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
  ,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
  ,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
  ,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
  ,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
  ,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
  ,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
  ,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
  ,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
  ,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
  ,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
  ,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
  ,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c backslash
  ,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
  ,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
  ,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
  ,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
  ,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
  ,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
  ,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
  ,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
  ,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
  ,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
  ,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
  ,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
  ,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
  ,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
  ,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
  ,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
  ,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
  ,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
  ,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
  ,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
  ,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
  ,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
  ,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
  ,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
  ,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
  ,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
  ,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
  ,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
  ,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
  ,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
  ,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
  ,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
  ,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
  ,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ~
  ,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f DEL
};


TOled128x64::TOled128x64( TI2c &I2c, uint8_t const I2cAddr ) :
  I2c( I2c ),
  Present( false ),
  I2cAddr( I2cAddr )
{
}

bool TOled128x64::Kick( uint32_t const Interval )
{
  Sleep( false );
  return false;
}

void TOled128x64::TimeoutHandler( void )
{
  Sleep( true );
}

void TOled128x64::Test( bool const Mode )
{
  Command( Mode ? DISPLAYALLON : DISPLAYALLOFF );
}

void TOled128x64::Sleep( bool const Mode )
{
  Command( Mode ? DISPLAYOFF : DISPLAYON );
}

void TOled128x64::Inverse( bool const Mode )
{
  Command( Mode ? INVERSEON : INVERSEOFF );
}

void TOled128x64::GotoXY( uint8_t const Xpos, uint8_t const Ypos )
{
  Command( PAGESTART + Ypos );
  Command( SETLOWCOLUMN + (( Xpos * 8U /*+ 2U*/ ) & 0x0fU ));
  Command( SETHIGHCOLUMN + (( Xpos * 8U /*+ 2U*/ ) >> 4U ));
}

void TOled128x64::Contrast( uint8_t const Level )
{
  Command( SETCONTRAST, Level );
}

void TOled128x64::Clear( void )
{
  for( uint32_t Row = 0U; Row < 8U; Row++ )
  {
    GotoXY( 0U, Row );
    for( uint32_t Column = 0U; Column < 16U; Column++ )
    {
      Print( ' ' );
    }
  }
}

void TOled128x64::Print( char const Char )
{
  if( Present == false )
  {
    return;
  }

  static uint8_t Mask = 0x00U;
  if( Char == '\x01' )
  {
    Mask = 0xffU;
  }
  else if( Char == '\x02' )
  {
    Mask = 0x00U;
  }
  else if( Char >= ' ' )
  {
    char const Index = Char - ' ';

    uint8_t Data[ 9 ];
    Data[ 0 ] = 0x40;
    Data[ 1 ] = 0 ^ Mask;
    Data[ 2 ] = ASCII[ (int)Index ][ 0 ] ^ Mask;
    Data[ 3 ] = ASCII[ (int)Index ][ 1 ] ^ Mask;
    Data[ 4 ] = ASCII[ (int)Index ][ 2 ] ^ Mask;
    Data[ 5 ] = ASCII[ (int)Index ][ 3 ] ^ Mask;
    Data[ 6 ] = ASCII[ (int)Index ][ 4 ] ^ Mask;
    Data[ 7 ] = 0 ^ Mask;
    Data[ 8 ] = 0 ^ Mask;
    I2c.Write( I2cAddr, Data, sizeof( Data ));
  }
}

void TOled128x64::Print( uint8_t const Xpos, uint8_t const Ypos, char const *const Text )
{
  GotoXY( Xpos, Ypos );
  for( char const *Ptr = Text; *Ptr; Ptr++ )
  {
    Print( *Ptr );
  }
}

void TOled128x64::Printf( uint8_t const Xpos, uint8_t const Ypos, char const *const Format, ... )
{
  char Buffer[ ( 16 * 8 ) + 4 + 1 ];
  va_list Args;
  va_start( Args, Format );
  int const Result = vsnprintf( Buffer, sizeof( Buffer ), Format, Args );
  va_end( Args );

  if( Result > 0 )
  {
    Print( Xpos, Ypos, Buffer );
  }
}

void TOled128x64::Init( void )
{
  HAL_Delay( 500U );
#ifdef PWR_DISP0_GPIO_Port
  SetPin( PWR_DISP0_GPIO_Port, PWR_DISP0_Pin|PWR_DISP1_Pin );
#endif
  HAL_Delay( 100U );

  uint8_t Data[ 2 ];
  Data[ 0 ] = 0x00;
  Data[ 1 ] = NOP;
  Present = I2c.WriteCheck( I2cAddr, Data, sizeof( Data ));

  Command( SETDISPLAYCLOCKDIV, 0x80 );
  Delay();
  Command( SETMULTIPLEX, 0x3F );
  Delay();
  Command( SETDISPLAYOFFSET, 0x00 );
  Delay();
  Command( SETSTARTLINE + 0x00 );
  Delay();
  Command( CHARGEPUMP, 0x14 );
  Delay();
  Command( MEMORYMODE, 0x00 );
  Delay();
  Command( SEGREMAP + 0x01 );
  Delay();
  Command( COMSCANDEC );
  Delay();
  Command( SETCOMPINS, 0x12 );
  Delay();
  Command( SETPRECHARGE, 0xF1 );
  Delay();
  Command( SETVCOMDETECT, 0x40 );

  Delay();
  Test( false );
  Delay();
  Clear();
  Delay();
  Inverse( false );
  Delay();
  Contrast( 200 );
}

void TOled128x64::Command( uint8_t const Command )
{
  if( Present == true )
  {
    uint8_t Data[ 2 ];
    Data[ 0 ] = 0x00;
    Data[ 1 ] = Command;
    I2c.Write( I2cAddr, Data, sizeof( Data ));
  }
}

void TOled128x64::Command( uint8_t const Command, uint8_t const Data1 )
{
  if( Present == true )
  {
    uint8_t Data[ 3 ];
    Data[ 0 ] = 0x00;
    Data[ 1 ] = Command;
    Data[ 2 ] = Data1;
    I2c.Write( I2cAddr, Data, sizeof( Data ));
  }
}

void TOled128x64::Command( uint8_t const Command, uint8_t const Data1, uint8_t const Data2 )
{
  if( Present == true )
  {
    uint8_t Data[ 4 ];
    Data[ 0 ] = 0x00;
    Data[ 1 ] = Command;
    Data[ 2 ] = Data1;
    Data[ 3 ] = Data2;
    I2c.Write( I2cAddr, Data, sizeof( Data ));
  }
}

void TOled128x64::Delay( void )
{
  for( uint32_t volatile Index = 0U; Index < 1000U; Index++ )
  {
  }
}
